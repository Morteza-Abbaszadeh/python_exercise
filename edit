import setting
from PyQt5.QtSql import QSqlDatabase, QSqlQuery

class DatabaseManager:
    _instance = None

    def __new__(cls, db_name):
        if cls._instance is None:
            cls._instance = super(DatabaseManager, cls).__new__(cls)
            cls._instance.db_name = db_name
            cls._instance.db = QSqlDatabase.addDatabase("QSQLITE")
            cls._instance.db.setDatabaseName(db_name)
            cls._instance.create_table()
        return cls._instance

    def create_table(self):
        if not self.db.open():
            print("Error: Could not connect to database")
            return False

        query = QSqlQuery()
        query.exec_("""CREATE TABLE IF NOT EXISTS appointments (
                    national_id TEXT,
                    date TEXT,
                    hour TEXT,
                    description TEXT,
                    completed BOOLEAN DEFAULT 0
                )""")
        self.db.close()

    def add_appointment(self, national_id, date, hour, description):
        if not self.db.open():
            print("Error: Could not connect to database")
            return False

        query = QSqlQuery()
        query.prepare("INSERT INTO appointments (national_id, date, hour, description) VALUES (?, ?, ?, ?)")
        query.bindValue(0, national_id)
        query.bindValue(1, date)
        query.bindValue(2, hour)
        query.bindValue(3, description)
        if not query.exec_():
            print("Error: Failed to add appointment")
            return False
        self.db.close()
        return True

    def find_appointments_by_date(self, date):
        if not self.db.open():
            print("Error: Could not connect to database")
            return []

        query = QSqlQuery()
        query.prepare("SELECT national_id, hour, description, completed FROM appointments WHERE date = ?")
        query.bindValue(0, date)
        if not query.exec_():
            print("Error: Failed to fetch appointments")
            return []
        appointments = []
        while query.next():
            appointments.append((query.value(0), query.value(1), query.value(2), query.value(3)))
        self.db.close()
        return appointments

if __name__ == '__main__':
    db_manager = DatabaseManager("medical_app.db")
    db_manager.add_appointment("1234567890", "2024-05-05", "09:00", "Checkup")
    appointments = db_manager.find_appointments_by_date("2024-05-05")
    print("Appointments for 2024-05-05:", appointments)
